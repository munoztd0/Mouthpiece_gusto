}
# get IP output
participant <- sub
RefA        <- 0
RefB        <- refB
VarA        <- varA
IP.A        <- varA
# set hard boundaries to IP based on variability of choice
if (noVarInf == 7) {
IP.B <- 6
} else if (noVarSup == 7) {
IP.B <- 0
} else {
IP.B <- -(as.numeric(glm_model$coefficients[1]) / as.numeric(glm_model$coefficients[2]))
if (IP.B < 0) {
IP.B <- 0
} else if (IP.B > 6) {
IP.B <- 6
}
}
# get choice probability at IP for each amount of VarA for plots
if (is.na(IP.B)) {
probVar_IP = NaN
} else if (IP.B <= 0) {
probVar_IP = min(prob_choice$fitted_probVar)
} else if (IP.B >= 6) {
probVar_IP = max(prob_choice$fitted_probVar)
} else {
probVar_IP = 0.5
}
# save outputs
IPs <- rbind(IPs, data.frame(participant, RefA, RefB, VarA, IP.A, IP.B)) # as data frame
varA_output <- append(varA_output, list(list(data_subset, glm_model, prob_choice, data.frame(IP = cbind(IP.A, IP.B), probVar_IP = probVar_IP)))) # as list
names(varA_output[[match(varA, VarA_amounts)]]) <- c('Subset', 'Glm', 'Prob', 'IP')
}
# save outputs
refB_output <- append(refB_output, list(varA_output))
names(refB_output[[1]]) <- c('VarA=1', 'VarA=2', 'VarA=3', 'VarA=4')
# clear var for next iteration
#rm(participant, RefA, RefB, IP.A, IP.B, glm_model, prob_choice)
# save outputs
sub_output <- append(sub_output, list(refB_output))
names(sub_output[[match(refB, RefB_amounts)]]) <- paste('RefB=', refB, sep = '')
# print plot if indicated
if (printindividualplots_VarA[[1]] == 1) {
if (sub %in% printindividualplots_VarA[[2]]) {
# make plots
plot_varA_1 <- ggplot(
data = sub_output[[1]][['RefB=6']][['VarA=1']][['Prob']],
mapping = aes(x = VarB, y = probVar)
) +
plotchoice.visual +
geom_point(
size = 2
) +
geom_function(
fun = function(x) pnorm(sub_output[[1]][['RefB=6']][['VarA=1']][['Glm']]$coefficients[1] + sub_output[[1]][['RefB=6']][['VarA=1']][['Glm']]$coefficients[2] * x)
) +
geom_point(
data = sub_output[[1]][['RefB=6']][['VarA=1']][['IP']],
mapping = aes(x = IP.IP.B, y = probVar_IP),
colour = 'red',
size = 4
) +
labs(
title = paste('VarA = ', sub_output[[1]][['RefB=6']][['VarA=1']][['Subset']]$VarA[1], sep = ''),
x = '',
y = ''
)
plot_varA_2 <- ggplot(
data = sub_output[[1]][['RefB=6']][['VarA=2']][['Prob']],
mapping = aes(x = VarB, y = probVar)
) +
plotchoice.visual +
geom_point(
size = 2
) +
geom_function(
fun = function(x) pnorm(sub_output[[1]][['RefB=6']][['VarA=2']][['Glm']]$coefficients[1] + sub_output[[1]][['RefB=6']][['VarA=2']][['Glm']]$coefficients[2] * x)
) +
geom_point(
data = sub_output[[1]][['RefB=6']][['VarA=2']][['IP']],
mapping = aes(x = IP.IP.B, y = probVar_IP),
colour = 'red',
size = 4
) +
labs(
title = paste('VarA = ', sub_output[[1]][['RefB=6']][['VarA=2']][['Subset']]$VarA[1], sep = ''),
x = '',
y = ''
)
plot_varA_3 <- ggplot(
data = sub_output[[1]][['RefB=6']][['VarA=3']][['Prob']],
mapping = aes(x = VarB, y = probVar)
) +
plotchoice.visual +
geom_point(
size = 2
) +
geom_function(
fun = function(x) pnorm(sub_output[[1]][['RefB=6']][['VarA=3']][['Glm']]$coefficients[1] + sub_output[[1]][['RefB=6']][['VarA=3']][['Glm']]$coefficients[2] * x)
) +
geom_point(
data = sub_output[[1]][['RefB=6']][['VarA=3']][['IP']],
mapping = aes(x = IP.IP.B, y = probVar_IP),
colour = 'red',
size = 4
) +
labs(
title = paste('VarA = ', sub_output[[1]][['RefB=6']][['VarA=3']][['Subset']]$VarA[1], sep = ''),
x = '',
y = ''
)
plot_varA_4 <- ggplot(
data = sub_output[[1]][['RefB=6']][['VarA=4']][['Prob']],
mapping = aes(x = VarB, y = probVar)
) +
plotchoice.visual +
geom_point(
size = 2
) +
geom_function(
fun = function(x) pnorm(sub_output[[1]][['RefB=6']][['VarA=4']][['Glm']]$coefficients[1] + sub_output[[1]][['RefB=6']][['VarA=4']][['Glm']]$coefficients[2] * x)
) +
geom_point(
data = sub_output[[1]][['RefB=6']][['VarA=4']][['IP']],
mapping = aes(x = IP.IP.B, y = probVar_IP),
colour = 'red',
size = 4
) +
labs(
title = paste('VarA = ', sub_output[[1]][['RefB=6']][['VarA=4']][['Subset']]$VarA[1], sep = ''),
x = '',
y = ''
)
# draw full plot
plot_full = grid.arrange(
plot_varA_1, plot_varA_2, plot_varA_3, plot_varA_4,
ncol = 4,
top = textGrob(
label = paste('Participant ', sub, ', RefB = ', RefB_amounts, '\n', sep =''),
gp = gpar(fontface = 'bold', cex = 1.5)
),
left = textGrob(
label = 'Probability of choosing\nthe Variable Bundle',
rot = 90,
gp = gpar(fontface = 'bold', cex = 1.3)
),
bottom = textGrob(
label = 'Amount of Component B in Variable Bundle\n',
gp = gpar(fontface = 'bold', cex = 1.3)
)
)
}
}
# save outputs
outputs <- append(outputs, list(sub_output))
names(outputs[[match(sub, participants)]]) <- paste('Sub=', sub, sep = '')
# clear lists for next participant
#rm(refB_output, varA_output, sub_output)
}
})
library(readr)
PubMed <- read_csv("Downloads/PubMed_Timeline_Results_by_Year.csv")
View(PubMed)
library(readr)
PubMed_Timeline_Results_by_Year <- read_csv("Downloads/PubMed_Timeline_Results_by_Year.csv")
View(PubMed_Timeline_Results_by_Year)
df = PubMed_Timeline_Results_by_Year
# Area plot
ggplot(df, aes(x = date, y = count)) +
geom_area(alpha = 0.5, position = position_dodge(0.8)) +
scale_color_manual(values = c("#E7B800")) +
scale_fill_manual(values = c("#E7B800"))
library(ggplot2)
# Area plot
ggplot(df, aes(x = date, y = count)) +
geom_area(alpha = 0.5, position = position_dodge(0.8)) +
scale_color_manual(values = c("#E7B800")) +
scale_fill_manual(values = c("#E7B800"))
View(df)
# Area plot
ggplot(df, aes(x = Year, y = Count)) +
geom_area(alpha = 0.5, position = position_dodge(0.8)) +
scale_color_manual(values = c("#E7B800")) +
scale_fill_manual(values = c("#E7B800"))
library(readr)
PubMed_Timeline_Results_by_Year_1_ <- read_csv("Downloads/PubMed_Timeline_Results_by_Year(1).csv")
View(PubMed_Timeline_Results_by_Year_1_)
df = PubMed_Timeline_Results_by_Year_1_
# Area plot
ggplot(df, aes(x = Year, y = Count)) +
geom_area(alpha = 0.5, position = position_dodge(0.8)) +
scale_color_manual(values = c("#E7B800")) +
scale_fill_manual(values = c("#E7B800"))
ggplot(df, aes(x = Year, y = Count)) +
geom_hist(alpha = 0.5) +
scale_color_manual(values = c("#E7B800")) +
scale_fill_manual(values = c("#E7B800"))
ggplot(df, aes(x = Year, y = Count)) +
geom_histogram(alpha = 0.5) +
scale_color_manual(values = c("#E7B800")) +
scale_fill_manual(values = c("#E7B800"))
ggplot(df, aes(x = Year, y = Count)) +
geom_bar(alpha = 0.5) +
scale_color_manual(values = c("#E7B800")) +
scale_fill_manual(values = c("#E7B800"))
ggplot(df,aes(foo,count))+geom_bar(stat="identity")
ggplot(df,aes(Year,Count))+geom_bar(stat="identity")
library(ggthemes)
ggplot(df,aes(Year,Count))+geom_bar(stat="identity") +
theme_fivethirtyeight()
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", col)
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", col="#E7B800")
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF")
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
theme_fivethirtyeight()  + theme_bw(base_size = 32, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 32, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position=c(.9,.9),
legend.title  = element_text(size = 12),
legend.text  = element_text(size = 10),
legend.key.size = unit(0.2, "cm"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
panel.grid.major.x = element_blank() ,
panel.grid.major.y = element_line(size=.2, color="lightgrey") ,
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
theme_fivethirtyeight(base_size = 32, base_family = "Helvetica") +
theme(axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
theme_fivethirtyeight(base_size = 32, base_family = "Helvetica")
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
theme_fivethirtyeight(base_size = 32, base_family = "Helvetica") +
theme(axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
theme_fivethirtyeight(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major.y = element_line(size=.2, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
theme_fivethirtyeight(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major.y = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
theme_fivethirtyeight(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
#theme_fivethirtyeight(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
#theme_fivethirtyeight() +
theme(base_size = 32, base_family = "Helvetica", panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1960,2020, by = 10)), limits = c(1950,2021)) +
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1960,2020, by = 10)), limits = c(1955,2025)) +
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
ggplot(df,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1960,2020, by = 10)), limits = c(1955,2025)) +  ylab('Publications')+
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
##################################################################################################
# Created  by D.M.T. on AUGUST 2021
##################################################################################################
#                                      PRELIMINARY STUFF ----------------------------------------
#load libraries
if(!require(pacman)) {
install.packages("pacman")
install.packages("devtools")
library(pacman)
}
pacman::p_load(tidyverse, dplyr, plyr, Rmisc, afex, BayesFactor, ggpubr)
# get tool
devtools::source_gist("2a1bb0133ff568cbe28d",
filename = "geom_flat_violin.R")
source('~/OBIWAN/GUSTO/cohen_d_ci.R', echo=F)
source('~/OBIWAN/GUSTO/pes_ci.R', echo=F)
# -------------------------------------------------------------------------
# *************************************** SETUP **************************************
# -------------------------------------------------------------------------
# Set path
home_path       <- '~/OBIWAN'
# Set working directory
analysis_path <- file.path(home_path, 'GUSTO')
figures_path  <- file.path(home_path, 'GUSTO/FIGURES')
setwd(analysis_path)
#datasets dictory
data_path <- file.path(home_path,'DERIVATIVES/BEHAV')
home_path
analysis_path
df_pubmed  <- read.delim(file.path(analysis_path,'PubMed.csv'), header = T, sep =',') #
View(df_pubmed)
df_pubmed  <- read.delim(file.path(analysis_path,'PubMed.csv'), header = T, sep =',') #
ggplot(df_pubmed,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1960,2020, by = 10)), limits = c(1955,2025)) +  ylab('Publications')+
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
plot_pub= ggplot(df_pubmed,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1960,2020, by = 10)), limits = c(1955,2025)) +  ylab('Publications')+
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
cairo_pdf(file.path(figures_path,'Figure_PubMed.pdf'))
print(plot_pub)
dev.off()
sum(df_pubmed$Count(=)
sum(df_pubmed$Count)
df_pubmed  <- read.delim(file.path(analysis_path,'PubMed.csv'), header = T, sep =',') #
plot_pub = ggplot(df_pubmed,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1960,2020, by = 10)), limits = c(1955,2025)) +  ylab('Publications')+
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
cairo_pdf(file.path(figures_path,'Figure_PubMed.pdf'))
print(plot_pub)
dev.off()
df_pubmed  <- read.delim(file.path(analysis_path,'PubMed.csv'), header = T, sep =',') #
View(df_pubmed)
plot_pub = ggplot(df_pubmed,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1960,2020, by = 10)), limits = c(1955,2025)) +  ylab('Publications')+
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
plot_pub = ggplot(df_pubmed,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1970,2020, by = 10)), limits = c(1965,2025)) +  ylab('Publications')+
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
plot_pub
plot_pub = ggplot(df_pubmed,aes(Year,Count))+geom_bar(stat="identity", fill="#21908CFF") +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(1970,2020, by = 10)), limits = c(1965,2022)) +  ylab('Publications')+
theme_bw(base_size = 32, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size=.8, color="lightgrey"),axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
plot_pub
##################################################################################################
# Created  by D.M.T. on AUGUST 2021
##################################################################################################
#                                      PRELIMINARY STUFF ----------------------------------------
#load libraries
if(!require(pacman)) {
install.packages("pacman")
install.packages("devtools")
library(pacman)
}
pacman::p_load(tidyverse, dplyr, plyr, Rmisc, afex, BayesFactor, ggpubr)
# get tool
devtools::source_gist("2a1bb0133ff568cbe28d",
filename = "geom_flat_violin.R")
source('~/OBIWAN/GUSTO/cohen_d_ci.R', echo=F)
source('~/OBIWAN/GUSTO/pes_ci.R', echo=F)
# -------------------------------------------------------------------------
# *************************************** SETUP **************************************
# -------------------------------------------------------------------------
# Set path
home_path       <- '~/OBIWAN'
# Set working directory
analysis_path <- file.path(home_path, 'GUSTO')
figures_path  <- file.path(home_path, 'GUSTO/FIGURES')
setwd(analysis_path)
#datasets dictory
data_path <- file.path(home_path,'DERIVATIVES/BEHAV')
# open datasets
HED  <- read.delim(file.path(data_path,'OBIWAN_HEDONIC.txt'), header = T, sep ='') #
info <- read.delim(file.path(data_path,'info_expe.txt'), header = T, sep ='') #
#subset only pretest
HED = subset(HED, session == 'second')
#exclude participants (242 really outlier everywhere, 256 can't do the task, 114 & 228 REALLY hated the solution and thus didn't "do" the conditioning) & 123, 124 and 226 have imcomplete data
`%notin%` <- Negate(`%in%`)
HED = filter(HED, id %notin% c(242, 256, 114, 228, 123, 124, 226))
#merge with info
HED = merge(HED, info, by = "id")
# Check Demo
AGE = ddply(HED,.(), summarise,mean=mean(age),sd=sd(age), min = min(age), max = max(age)); AGE
GENDER = ddply(HED, .(id), summarise, gender=mean(as.numeric(gender)))  %>%
group_by(gender) %>%
tally() ; GENDER #1 = women
cov = ddply(HED, .(id),  summarize, age = mean(age, na.rm = TRUE), gender = mean(as.numeric(gender), na.rm = TRUE)) ; cov$age = scale(cov$age)
write.table(cov, (file.path(analysis_path, "covariate.txt")), row.names = F, sep="\t")
# -------------------------------------- PLOTS -----------------------------------------------
# -------------------------------------- themes for plots --------------------------------------------------------
averaged_theme <- theme_bw(base_size = 32, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 32, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position=c(.9,.9),
legend.title  = element_text(size = 12),
legend.text  = element_text(size = 10),
legend.key.size = unit(0.2, "cm"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
panel.grid.major.x = element_blank() ,
panel.grid.major.y = element_line(size=.2, color="lightgrey") ,
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
pal = viridis::inferno(n=5) # specialy conceived for colorblindness
HED.means <- aggregate(list(HED$perceived_liking, HED$perceived_intensity), by = list(HED$id, HED$condition), FUN='mean') # extract means
colnames(HED.means) <- c('id','condition','perceived_liking', 'perceived_intensity')
HED.means$int =  HED.means$perceived_intensity[HED.means$condition=="MilkShake"] - HED.means$perceived_intensity[HED.means$condition=="Empty"]; HED.means$int = scale(HED.means$int)
HED.means$lik =  HED.means$perceived_liking[HED.means$condition=="MilkShake"] - HED.means$perceived_liking[HED.means$condition=="Empty"]; HED.means$lik = scale(HED.means$lik)
HED.means$id = as.factor(HED.means$id); HED.means$condition = as.factor(HED.means$condition)
# AVERAGED EFFECT INTENSITY
dfH <- summarySEwithin(HED.means,
measurevar = "perceived_intensity",
withinvars = "condition",
idvar = "id")
dfH$cond <- ifelse(dfH$condition == "MilkShake", -0.25, 0.25)
HED.means$cond <- ifelse(HED.means$condition == "MilkShake", -0.25, 0.25)
set.seed(666)
HED.means <- HED.means %>% mutate(condjit = jitter(as.numeric(cond), 0.3),
grouping = interaction(id, cond))
pp <- ggplot(HED.means, aes(x = cond, y = perceived_intensity,
fill = condition, color = condition)) +
geom_point(data = dfH, alpha = 0.5) +
geom_line(aes(x = condjit, group = id, y = perceived_intensity), alpha = .3, size = 0.5, color = 'gray') +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(fill = condition, color = NA))+
geom_point(aes(x = condjit), alpha = .3,) +
geom_crossbar(data = dfH, aes(y = perceived_intensity, ymin=perceived_intensity-ci, ymax=perceived_intensity+ci,), width = 0.2 , alpha = 0.1)+
ylab('Perceived taste intesity') +
xlab('') +
scale_y_continuous(expand = c(0, 0), breaks = c(seq.int(0,100, by = 20)), limits = c(-0.5,100.5)) +
scale_x_continuous(labels=c("Milkshake", "Tasteless"),breaks = c(-.25,.25), limits = c(-.5,.5)) +
scale_fill_manual(values=c("MilkShake"= pal[3], "Empty"=pal[1]), guide = 'none') +
scale_color_manual(values=c("MilkShake"=pal[3], "Empty"=pal[1]), guide = 'none') +
theme_bw()
ppp1 <- pp + averaged_theme + theme(plot.margin = margin(3,0.1,0.1,0.1, "cm"))
ppp1
# STATS -------------------------------------------------------------------
# intensity
anova.HED <- aov_car(perceived_intensity ~ condition  + Error (id/condition), data = HED.means, factorize = F, anova_table = list(correction = "GG", es = "none")); summary(anova.HED)
pes_ci(perceived_intensity ~ condition + Error (id/condition), data = HED.means, factorize = F, epsilon = "GG")
# Bayes factors
BF = anovaBF(perceived_intensity ~ condition + id, data = HED.means, whichRandom = "id"); BF
t.test(perceived_intensity ~ condition, data = HED.means, paired = T)
HED.means$cond
HED.means$condition
HED.means$condition <- relevel(HED.means$condition, "Milkshake") # Make MilkShake first
HED.means$condition <- relevel(HED.means$condition, "MilkShake") # Make MilkShake first
HED.means$condition
t.test(perceived_intensity ~ condition, data = HED.means, paired = T)
source('~/OBIWAN/GUSTO/cohen_d_ci.R', echo=TRUE)
cohen_d_ci(HED.means$perceived_intensity[HED.means$condition == "MilkShake"], HED.means$perceived_intensity[HED.means$condition == "Empty"], paired=T)
devtools::source_gist("383aa93ffa161665c0dca1103ef73d9d",
filename = "effect_CI.R")
##################################################################################################
# Created  by D.M.T. on AUGUST 2021
##################################################################################################
#                                      PRELIMINARY STUFF ----------------------------------------
#load libraries
if(!require(pacman)) {
install.packages("pacman")
install.packages("devtools")
library(pacman)
}
# get tool
devtools::source_gist("383aa93ffa161665c0dca1103ef73d9d",
filename = "effect_CI.R")
